@model NowBuySell.Data.NewsFeed
@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<link href="~/Assets/Admin/plugins/Cropper/cropper.css" rel="stylesheet" />
<link href="~/Assets/Admin/css/general/ImageUploader.css" rel="stylesheet" />
<style>
    .video-frame {
        width: 100%;
        height: auto;
        box-shadow: 0 0 6px 3px #0000004f;
        border-radius: 5px;
        padding: 10px;
    }
</style>
<!--begin::Content-->
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">
    <!--begin::Subheader-->
    <div class="subheader py-2 py-lg-12 subheader-transparent" id="kt_subheader">
        <div class="container d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <!--begin::Info-->
            <div class="d-flex align-items-center flex-wrap mr-1">
                <!--begin::Heading-->
                <div class="d-flex flex-column">
                    <!--begin::Breadcrumb-->
                    <div class="d-flex align-items-center font-weight-bold my-2">
                        <!--begin::Item-->
                        <a href="/Admin/Dashboard/Index" class="opacity-75 hover-opacity-100">
                            <i class="flaticon2-shelter text-white icon-1x"></i>
                        </a>
                        <!--end::Item-->
                        <!--begin::Item-->
                        <a href="/Admin/Dashboard/Index" class="text-white text-hover-white opacity-75 hover-opacity-100">&nbsp;&nbsp;Dashboard</a>
                        <!--end::Item-->
                        <!--begin::Item-->
                        <span class="label label-dot label-sm bg-white opacity-75 mx-3"></span>
                        <a href="/Admin/NewsFeed/Index" class="text-white text-hover-white opacity-75 hover-opacity-100">News Feed</a>
                        <span class="label label-dot label-sm bg-white opacity-75 mx-3"></span>
                        <a href="javascript:;" class="text-white text-hover-white opacity-75 hover-opacity-100">Update</a>
                        <!--end::Item-->
                    </div>
                    <!--end::Breadcrumb-->
                </div>
                <!--end::Heading-->
            </div>
            <!--end::Info-->
        </div>
    </div>
    <!--end::Subheader-->
    <!--begin::Entry-->
    <div class="d-flex flex-column-fluid">
        <!--begin::Container-->
        <div class="container">
            <!--begin::Dashboard-->
            <!--begin::Card-->
            <div class="card card-custom" id="kt_page_sticky_card">
                <div class="card-header">
                    <div class="card-title">
                        <h3 class="card-label">
                            News Feed
                            <span class="d-block text-muted pt-2 font-size-sm">Update News Feed Here...</span>
                        </h3>
                    </div>
                    <div class="card-toolbar">
                        <a href="/Admin/NewsFeed/Index" class="btn btn-light-primary font-weight-bolder mr-2">
                            <i class="ki ki-long-arrow-back icon-sm"></i>Back
                        </a>
                        <div class="btn-group">
                            <button type="submit" class="btn btn-info font-weight-bolder" form="Userform">
                                <i class="ki ki-check icon-sm"></i>Save
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "NewsFeed", new { area = "Admin" }, FormMethod.Post, new { enctype = "multipart/form-data", id = "Userform" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="alert alert-danger text-center" id="divMessage" style="display:none"></div>
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="col-md-12 mb-3" style=" display: flex; justify-content: center; align-items: center;">
                                <div class="image-upload @(Model.BannerImage!=null? "uploaded":"empty")">
                                    <i class="fa fa-camera"></i>
                                    <span>Upload Image</span>
                                    <input type="file" name="BannerImage" id="Logo" class="logo" accept=".png, .jpg, .jpeg" style="width:1px !important;height:1px !important" />
                                    <img id="PreviewImage" src='@Model.BannerImage' />
                                    @*<i class="fa fa-trash"></i>*@
                                    <i class="fa fa-pen"></i>
                                </div>
                            </div>
                            <span class="form-text text-muted">Image dimensions should be 690 x 460 pixels and Image size must be less than 400 kb</span>
                        </div>
                        @Html.HiddenFor(model=>model.ID)
                    
                        <div class="row">
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Title</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter title here ...", required = "required" } })
                                        <div class="input-group-append"><span class="input-group-text"><i class="fa fa-tag"></i></span></div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Title (Ar)</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.TitleAr, new { htmlAttributes = new { @class = "form-control", dir = "rtl", placeholder = "Enter title (ar) here ...", required = "required" } })
                                        <div class="input-group-append"><span class="input-group-text"><i class="fa fa-tag"></i></span></div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.TitleAr, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Author</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter author here ...", required = "required" } })
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Author (Ar)</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.AuthorAr, new { htmlAttributes = new { @class = "form-control", dir = "rtl", placeholder = "Enter author (Ar) here ...", required = "required" } })
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.AuthorAr, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Badge</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.Badge, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter badge here ...", required = "required" } })
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-id-badge"></i></span>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Badge, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Badge (Ar)</label>
                                    <div class="input-group mb-2">
                                        @Html.EditorFor(model => model.BadgeAr, new { htmlAttributes = new { @class = "form-control", dir = "rtl", placeholder = "Enter badge (Ar) here ...", required = "required" } })
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-id-badge"></i></span>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.BadgeAr, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Description</label>
                                    <div class="input-group mb-2">
                                        @Html.TextAreaFor(model => model.TitleDescription, 10, 30, new { @class = "form-control", placeholder = "Enter description  here ..." })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.TitleDescription, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Description(Ar)</label>
                                    <div class="input-group mb-3">
                                        @Html.TextAreaFor(model => model.TitleDescriptionAr, 10, 30, new { @class = "form-control", dir = "rtl", placeholder = "Enter description (ar)  here ..." })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.TitleDescriptionAr, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @{
                                var moduleList = new SelectList(new[]
                                {
                                     new SelectListItem { Text = "Select Type", Value = "" },
                                     new SelectListItem { Text = "Motors", Value = "Motor" },
                                     new SelectListItem { Text = "Properties", Value = "Property"},

                        }, "Value", "Text");
                            }

                            <div class="col-md-4 col-sm-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Module, "Type", htmlAttributes: new { @class = "control-label" })
                                    <div class="input-group mb-2">
                                        @Html.DropDownListFor(model => model.Module, moduleList, htmlAttributes: new { @class = "form-control", required = "required" })
                                        <div class="input-group-append">
                                            <span class="input-group-text">
                                                <i class="fa fa-server"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="video" class="col-md-8 col-sm-12">
                                <div class="form-group">
                                    <label class="control-label">Video</label>
                                    <div class="input-group mb-2">
                                        <input type="file" class="form-control" name="Video" id="Video" placeholder="Browse"  />
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-video"></i></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-md-8 col-sm-12">
                                @if (Model.Video != null)
                                {
                                    <div class="video-frame">
                                        <span class="btn btn-circle btn-hover-text-primary btn-icon btn-white btn-pill btn-shadow btn-xs float-right mb-2" data-action="cancel" id="deletevideo" data-toggle="tooltip" title="Delete Video">
                                            <i class="ki ki-bold-close icon-xs text-muted"></i>
                                        </span>
                                        <video style="width: 100%; height: 100%;" controls>
                                            <source src="@Url.Content(Model.Video)" type="video/mp4" />
                                        </video>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            <!--end::Card-->
            <!--end::Dashboard-->
        </div>
        <!--end::Container-->
    </div>
    <!--end::Entry-->
</div>
<!--end::Row-->
<div class="modal fade" id="CropperModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document" style="max-width: 90vw;">
        <div class="modal-content">
            <div class="modal-body">
                <div class="row">

                    <div class="col-12">
                        <div class="img-container">
                            <img id="image" src="" style="width:80vw;height:80vh">
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-info" id="crop">Submit</button>
            </div>
        </div>
    </div>
</div>
<script>
    var SuccessMessage = '@ViewBag.SuccessMessage';
    var ErrorMessage = '@ViewBag.ErrorMessage';
</script>
@section IndexScript {

    <script src="~/Assets/Admin/plugins/Cropper/cropper.js"></script>
    <script src="~/Assets/Admin/js/general/ImageUploader.js"></script>
    <!--end::Page Scripts-->
    <script>

        'use strict';
        // Class definition
        var KTImageInputDemo = function () {
            // Private functions
            var initDemos = function () {
                var avatar1 = new KTImageInput('kt_image_1');
            }
            return {
                // public functions
                init: function () {
                    initDemos();
                }
            };
        }();
        var _URL = window.URL || window.webkitURL;
        var logoPath;
        jQuery(document).ready(function () {

            $('select[name=Module]').val('@Model.Module');
      
            $('i.fa-pen').click(function () {
                $("#Logo").trigger('click');
            });

            $('i.fa-camera').click(function () {
                $("#Logo").trigger('click');
            });

            var option = {};
            option.aspectRatio = 1.5;
            option.minCroppedWidth = 690;
            option.minCroppedHeight = 450;

           
            BindImageUploader("#Logo", "#image", "#CropperModal", "#PreviewImage", option);

            $('#Userform').submit(function () {


                var data = new FormData();
                if (logoPath) {
                    data.append("BannerImage", logoPath);
                }

                data.append("ID", $('#ID').val());
                data.append("Title", $('#Title').val());
                data.append("TitleAr", $('#TitleAr').val());
                data.append("TitleDescription", $('#TitleDescription').val());
                data.append("TitleDescriptionAr", $('#TitleDescriptionAr').val());
                data.append("Module", $('#Module').val());
                data.append("Author", $('#Author').val());
                data.append("AuthorAr", $('#AuthorAr').val());
                data.append("Badge", $('#Badge').val());
                data.append("BadgeAr", $('#BadgeAr').val());
                if ($("#Video").get(0).files.length > 0) {
                    data.append("Video", $('#Video')[0].files[0])
                }
               
                $.ajax({
                    url: "/Admin/NewsFeed/Edit/",
                    type: "POST",
                    processData: false,
                    contentType: false,
                    data: data,
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            setTimeout(function () { window.location.href = response.url }, 2000);
                        }
                        else  {
                            toastr.error(response.message);
                        
                           
                        }
                    
                      
                    },
                    error: function (er) {
                        toastr.error(er);
                    }
                });
                return false;
            });
            KTUtil.ready(function () {
                var str = '@Model.Video';
                str = str.toString();
                if (str == "") {
                    $("#video").show();
                }
                else if (str != null) {
                    $("#video").hide();
                }
                else {
                    $("#video").show();
                }
                KTImageInputDemo.init();
            });
            $("#deletevideo").click(function () {
                $(".video-frame").hide();
                $("#video").show();
            })
            $("#Video").change(function (e) {

                var file;
                if ((file = this.files[0])) {
                    if (!file.type.match('video.*')) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Please upload valid video file !',
                        }).then(function (result) {
                            $("#Video").val("");
                        });
                    }
                    else if (file.size >= 4194304) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Video size must be less than 4 mb !',
                        }).then(function (result) {
                            $("#Video").val("");
                        });
                    }
                }
            });
            if (SuccessMessage) {
                toastr.success(SuccessMessage);
            }
            else if (ErrorMessage) {
                toastr.error(ErrorMessage);
            }
        });


    </script>
    <!--end::Page Scripts-->
}